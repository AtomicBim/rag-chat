import requests
import gradio as gr
import config
from qdrant_client import QdrantClient
from typing import Optional, Tuple, List
from bs4 import BeautifulSoup
from urllib.parse import quote

def get_file_preview(evt: gr.SelectData):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ '—Å–∫—Ä–µ–ø–∫–µ'. –§–æ—Ä–º–∏—Ä—É–µ—Ç URL –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ 
    —Å —Å–µ—Ä–≤–∏—Å–∞ rag-client.
    """
    try:
        soup = BeautifulSoup(evt.value, "html.parser")
        link = soup.find('a')
        if link and link.has_attr('href'):
            file_ref = link['href'].split('=')[-1]
            
            # –ö–æ–¥–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –ø–µ—Ä–µ–¥–∞—á–∏ –≤ URL
            encoded_file_ref = quote(file_ref)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π URL –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª—É
            file_url = f"{config.DOCS_ENDPOINT.strip('/')}/{encoded_file_ref}"
            print(f"–ó–∞–ø—Ä–æ—Å –ø—Ä–µ–≤—å—é –¥–ª—è URL: {file_url}")
            return file_url
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–ª–∏–∫–∞ –¥–ª—è –ø—Ä–µ–≤—å—é: {e}")
    
    return None

class RAGOrchestrator:
    def __init__(self, qdrant_client: QdrantClient):
        self.qdrant_client = qdrant_client
        print("‚úÖ –ö–ª–∏–µ–Ω—Ç-–æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")

    def get_embedding(self, text: str) -> Optional[list[float]]:
        """–ü–æ–ª—É—á–∞–µ—Ç —ç–º–±–µ–¥–¥–∏–Ω–≥, –æ–±—Ä–∞—â–∞—è—Å—å –∫ —Å–µ—Ä–≤–∏—Å—É –Ω–∞ GPU-–º–∞—à–∏–Ω–µ."""
        return self._make_api_request(
            config.EMBEDDING_SERVICE_ENDPOINT, 
            {"text": text}, 
            "embedding", 
            "—Å–µ—Ä–≤–∏—Å—É —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤",
            60
        )

    def query_llm(self, question: str, context: str) -> str:
        """–û–±—Ä–∞—â–∞–µ—Ç—Å—è –∫ LLM-—Å–µ—Ä–≤–∏—Å—É."""
        result = self._make_api_request(
            config.OPENAI_API_ENDPOINT,
            {"question": question, "context": context},
            "answer",
            "LLM-—Å–µ—Ä–≤–∏—Å—É",
            120
        )
        return result or "–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç."
    
    def _make_api_request(self, endpoint: str, payload: dict, response_key: str, service_name: str, timeout: int):
        """–û–±—â–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è API-–∑–∞–ø—Ä–æ—Å–æ–≤."""
        try:
            response = requests.post(endpoint, json=payload, timeout=timeout)
            response.raise_for_status()
            return response.json().get(response_key)
        except requests.exceptions.RequestException as e:
            error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ {service_name}: {e}"
            print(error_msg)
            return None if response_key == "embedding" else error_msg

    def process_query(self, question: str) -> Tuple[str, str, object]:
        """–ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–ø—Ä–æ—Å–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        if not question:
            return "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å.", "", None

        self._log_step(1, f"–ü–æ–ª—É—á–µ–Ω–∏–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–∞ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞: '{question[:30]}...'")
        question_embedding = self.get_embedding(question)
        if not question_embedding:
            return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–µ–∫—Ç–æ—Ä –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–µ—Ä–≤–∏—Å —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤.", ""
        self._log_completion("—ç–º–±–µ–¥–¥–∏–Ω–≥ –ø–æ–ª—É—á–µ–Ω")

        self._log_step(2, "–ü–æ–∏—Å–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –≤ Qdrant...")
        context, sources = self._search_and_prepare_context(question_embedding)
        if not context:
            return "–í –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞.", "", None

        self._log_step(3, "–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ LLM-—Å–µ—Ä–≤–∏—Å...")
        answer = self.query_llm(question, context)
        self._log_completion("–æ—Ç–≤–µ—Ç –æ—Ç LLM –ø–æ–ª—É—á–µ–Ω")

        answer_with_clips = self._add_paperclips_to_answer(answer, sources)
        
        return answer_with_clips, f"–ò—Å—Ç–æ—á–Ω–∏–∫–∏: {', '.join(sources)}", None
    
    def _add_paperclips_to_answer(self, answer: str, sources: List[str]) -> str:    
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∏–∫–æ–Ω–∫–∏-—Å–∫—Ä–µ–ø–∫–∏ –∫ –∞–±–∑–∞—Ü–∞–º –æ—Ç–≤–µ—Ç–∞."""
        # –ü—Ä–æ—Å—Ç–æ–π –≤–∞—Ä–∏–∞–Ω—Ç: –¥–æ–±–∞–≤–ª—è–µ–º —Å–∫—Ä–µ–ø–∫–∏ —Å–æ —Å—Å—ã–ª–∫–æ–π –Ω–∞ –ø–µ—Ä–≤—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫
        # –í –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω–æ–º –≤–∞—Ä–∏–∞–Ω—Ç–µ –Ω—É–∂–Ω–æ —Å–æ–ø–æ—Å—Ç–∞–≤–ª—è—Ç—å –∞–±–∑–∞—Ü —Å –µ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–º
        if not sources:
            return answer

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º BeautifulSoup –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å HTML-–ø–æ–¥–æ–±–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
        soup = BeautifulSoup(f"<div>{answer}</div>", "html.parser")
        paragraphs = soup.find_all('p') # LLM —á–∞—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç <p> —Ç–µ–≥–∏
        if not paragraphs:
             # –ï—Å–ª–∏ <p> –Ω–µ—Ç, –ø—Ä–æ—Å—Ç–æ —Ä–∞–±–æ—Ç–∞–µ–º —Å —Ç–µ–∫—Å—Ç–æ–º
             paragraphs = soup.get_text().split('\n')

        for i, p in enumerate(paragraphs):
            source_file = sources[i % len(sources)] # –¶–∏–∫–ª–∏—á–µ—Å–∫–∏ –±–µ—Ä–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏
            clip_html = f'<a href="file={source_file}" class="paperclip" title="–ü–æ–∫–∞–∑–∞—Ç—å {source_file}">üìé</a>'
            if isinstance(p, str):
                 paragraphs[i] = f"<p>{p} {clip_html}</p>"
            else:
                 p.append(BeautifulSoup(clip_html, "html.parser"))


        return "".join(map(str, paragraphs))
    
    def _search_and_prepare_context(self, question_embedding: list[float]) -> Tuple[str, list[str]]:
        """–ü–æ–∏—Å–∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –≤ Qdrant –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤."""
        search_results = self.qdrant_client.search(
            collection_name=config.COLLECTION_NAME,
            query_vector=question_embedding,
            limit=config.SEARCH_LIMIT,
            with_payload=True
        )
        
        if not search_results:
            return "", []
        
        context = "\n---\n".join([result.payload['text'] for result in search_results])
        sources = sorted(list(set([result.payload['source_file'] for result in search_results])))
        self._log_completion(f"–Ω–∞–π–¥–µ–Ω–æ {len(sources)} –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤")
        return context, sources
    
    def _log_step(self, step_num: int, message: str) -> None:
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —à–∞–≥–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏."""
        print(f"\n{step_num}. {message}")
    
    def _log_completion(self, message: str) -> None:
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —à–∞–≥–∞."""
        print(f"   ...{message}.")

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∑–∞–ø—É—Å–∫ Gradio ---
if __name__ == "__main__":
    try:
        print("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Qdrant...")
        q_client = QdrantClient(host=config.QDRANT_HOST, port=config.QDRANT_PORT)

        orchestrator = RAGOrchestrator(qdrant_client=q_client)

        print("\n–ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ Gradio...")
        with gr.Blocks() as iface:
            gr.Markdown(
                """
                # RAG-—Å–∏—Å—Ç–µ–º–∞ –¥–ª—è –í–ù–î –ê—Ç–æ–º—Å—Ç—Ä–æ–π–∫–æ–º–ø–ª–µ–∫—Å
                –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å. –°–∏—Å—Ç–µ–º–∞ –Ω–∞–π–¥–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç.
                –ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ üìé –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞.
                """
            )
            with gr.Row():
                with gr.Column(scale=2):
                    question_box = gr.Textbox(lines=3, label="–í–∞—à –≤–æ–ø—Ä–æ—Å –∫ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π")
                    submit_btn = gr.Button("–û—Ç–ø—Ä–∞–≤–∏—Ç—å")
                    sources_box = gr.Textbox(label="–ù–∞–π–¥–µ–Ω–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏")
                with gr.Column(scale=3):
                    answer_box = gr.HTML(label="–û—Ç–≤–µ—Ç", elem_id="answer_display") # –ò—Å–ø–æ–ª—å–∑—É–µ–º HTML –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–∫—Ä–µ–ø–æ–∫
                    file_preview = gr.File(label="–ü—Ä–µ–≤—å—é –¥–æ–∫—É–º–µ–Ω—Ç–∞")

            submit_btn.click(
                fn=orchestrator.process_query,
                inputs=question_box,
                outputs=[answer_box, sources_box, file_preview]
            )

            # –î–æ–±–∞–≤–ª—è–µ–º JavaScript –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª–∏–∫–æ–≤ –ø–æ —Å–∫—Ä–µ–ø–∫–∞–º
            answer_box.change(
                None,
                None,
                None,
                js="""
                function() {
                    setTimeout(() => {
                        document.querySelectorAll('#answer_display a[href^="file="]').forEach(link => {
                            link.onclick = function(e) {
                                e.preventDefault();
                                const fileName = this.href.split('file=')[1];
                                console.log('–ö–ª–∏–∫ –ø–æ —Ñ–∞–π–ª—É:', fileName);
                                // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
                            };
                        });
                    }, 100);
                }
                """
            )

        # –ó–∞–ø—É—Å–∫–∞–µ–º Gradio –Ω–∞ –ø–æ—Ä—Ç—É 80, —á—Ç–æ–±—ã –±—ã–ª –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ IP –º–∞—à–∏–Ω—ã
        iface.launch(server_name="0.0.0.0", server_port=7860)

    except Exception as e:
        print(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ü–†–ò –ó–ê–ü–£–°–ö–ï –û–†–ö–ï–°–¢–†–ê–¢–û–†–ê: {e}")